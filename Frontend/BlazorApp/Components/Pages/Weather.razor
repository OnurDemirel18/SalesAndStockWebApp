@page "/weather"
@using Business.Interfaces
@using Entities.Entities
@inject ICategoryService CategoryService
@rendermode InteractiveServer




<RadzenDataGrid @ref="categoriesGrid" AllowAlternatingRows="false" AllowFiltering="true" AllowPaging="true" PageSize="5" AllowSorting="true" EditMode="@editMode"
Data="@categories" TItem="Category" RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow" Sort="@Reset" Page="@Reset" Filter="@Reset" ColumnWidth="200px">
    <HeaderTemplate>
        <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle" Text="Yeni Kategori Ekle" Click="@InsertRow" Disabled="@(editMode == DataGridEditMode.Single)" />
    </HeaderTemplate>
    <Columns>

        <RadzenDataGridColumn Property="Id" Title="Category ID" Width="120px" Frozen="true" />
        <RadzenDataGridColumn Property="Name" Title="Name">
            <EditTemplate Context="context">
                <RadzenTextBox @bind-Value="context.Name" Style="width:100%; display: block" Name="Name" aria-label="Enter ship city" />
                <RadzenRequiredValidator Text="Category Name Is Required" Component="Name" Popup="true" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Context="Category" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Frozen="true" FrozenPosition="FrozenColumnPosition.Right">
            <Template Context="Category">
                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(Category))" @onclick:stopPropagation="true">
                </RadzenButton>
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@(args => DeleteRow(Category))" @onclick:stopPropagation="true">
                </RadzenButton>
            </Template>
            <EditTemplate Context="Category">
                <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveRow(Category))" aria-label="Save">
                </RadzenButton>
                <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@((args) => CancelEdit(Category))" aria-label="Cancel">
                </RadzenButton>
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@(args => DeleteRow(Category))" aria-label="Delete">
                </RadzenButton>
            </EditTemplate>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>





@code {
    RadzenDataGrid<Category> categoriesGrid;
    IEnumerable<Category> categories;


    DataGridEditMode editMode = DataGridEditMode.Multiple;

    Category categoriesToInsert;
    Category categoriesToUpdate;

    void Reset()
    {
        categoriesToInsert = null;
        categoriesToUpdate = null;
    }



    protected override async Task OnInitializedAsync()
    {
        categories = await CategoryService.GetAll();

    }

    async Task EditRow(Category _category)
    {

        categoriesToUpdate = _category;
        await categoriesGrid.EditRow(_category);
    }

    void OnUpdateRow(Category _category)
    {

    }

    async Task SaveRow(Category _category)
    {
        await categoriesGrid.UpdateRow(_category);
    }

    void CancelEdit(Category _category)
    {
        categoriesGrid.CancelEditRow(_category);
    }

    async Task DeleteRow(Category _category)
    {

    }

    async Task InsertRow()
    {
        categoriesToInsert = new Category();
        await categoriesGrid.InsertRow(categoriesToInsert);
    }

    async void OnCreateRow(Category entity)
    {
        var add = await CategoryService.Add(entity);
        categories = await CategoryService.GetAll();
    }
}