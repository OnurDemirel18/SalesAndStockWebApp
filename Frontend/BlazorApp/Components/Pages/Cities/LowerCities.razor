
@inject ICitiesService CitiesService
@rendermode InteractiveServer
<RadzenCard>
	@if (cities == null && upperCities == null)
	{
		<RadzenProgressBar Value="100" ProgressBarStyle="ProgressBarStyle.Primary" Mode="ProgressBarMode.Indeterminate" />
	}
	else
	{

		<RadzenButton Icon="add" Click="()=>InsertRow()" ButtonStyle="ButtonStyle.Success" Style="margin-bottom:5px">@ButtonName</RadzenButton>

		<RadzenDataGrid @ref="grid" Data="cities" PageSize="PageSize" TItem="Cities" AllowFiltering="true"
		AllowPaging="true" EditMode="DataGridEditMode.Single" RowCreate="OnCreateRow" RowUpdate="OnUpdateRow" Density="Density.Compact">
			<Columns>
				<RadzenDataGridColumn TItem="Cities" Title="Id" Property="Id" Sortable="true" Width="100px" />
				<RadzenDataGridColumn TItem="Cities" Title="Name" Property="Name" Sortable="true">
					<Template Context="context">
						@context.Name
					</Template>
					<EditTemplate Context="context">
						<RadzenTextBox @bind-Value="context.Name" Style="width:100%;display:block;" Placeholder="Lütfen Şehir Adını Giriniz." Name="Name" />
						<RadzenRequiredValidator Popup="true" Component="Name" Text="Şehir Adı Girmek Zorunludur." />
					</EditTemplate>
				</RadzenDataGridColumn>
				<RadzenDataGridColumn TItem="Cities" Title="ParentId" Property="ParentId" Sortable="true">
					<Template Context="context">
						@upperCities.FirstOrDefault().Name
					</Template>
					<EditTemplate Context="context">
						<RadzenDropDownDataGrid TValue="int" @bind-Value=@ParentId Data=@upperCities TextProperty="Name" ValueProperty="Id"
						AllowColumnResize="true" AllowFilteringByAllStringColumns="true" Name="DropDownDataGridColumns">
							<Columns>
								<RadzenDropDownDataGridColumn Property="Id" Title="ID" Width="100px" />
								<RadzenDropDownDataGridColumn Property="Name" Title="İsim" Width="200px" />

							</Columns>
						</RadzenDropDownDataGrid>
					</EditTemplate>
				</RadzenDataGridColumn>
				<RadzenDataGridColumn TItem="Cities" Width="350px">
					<Template Context="context">

						<RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Click="()=>EditRow(context)" />
						<RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Click="() => DeleteRow(context)" />

					</Template>
					<EditTemplate Context="context">

						<RadzenButton Icon="save" ButtonStyle="ButtonStyle.Success" Click="() => SaveRow(context)" />
						<RadzenButton Icon="cancel" ButtonStyle="ButtonStyle.Light" Click="() =>CancelEdit(context)" />

					</EditTemplate>
				</RadzenDataGridColumn>
			</Columns>
		</RadzenDataGrid>

	}
</RadzenCard>


@code {
	IList<Cities> cities;
	IList<Cities> upperCities;
	public int PageSize { get; set; } = 10;
	RadzenDataGrid<Cities> grid;
	Cities city;
	[Parameter]
	public int ParentId { get; set; }
	[Parameter]
	public string ButtonName { get; set; }

	protected override async Task OnParametersSetAsync()
	{
		cities = await CitiesService.ParentById(ParentId, 0, PageSize);
		var sehir2 = await CitiesService.GetById(ParentId);
		upperCities = new List<Cities>()
		{
			sehir2
		};
	}


	void InsertRow()
	{
		city = new Cities();
		grid.InsertRow(city);
	}

	async Task OnCreateRow(Cities entity)
	{
		entity.ParentId = ParentId;
		var add = await CitiesService.Add(entity);
		cities = await CitiesService.ParentById(ParentId, 0, PageSize);
		await InvokeAsync(StateHasChanged);

	}

	void SaveRow(Cities entity)
	{
		grid.UpdateRow(entity);
	}
	void EditRow(Cities entity)
	{
		grid.EditRow(entity);
	}
	void CancelEdit(Cities entity)
	{
		grid.CancelEditRow(entity);
	}
	async Task OnUpdateRow(Cities entity)
	{
		entity.ParentId = ParentId;
		var update = await CitiesService.Update(entity);
		cities = await CitiesService.ParentById(ParentId, 0, PageSize);
		await InvokeAsync(StateHasChanged);

	}
	async void DeleteRow(Cities entity)
	{
		CitiesService.Delete(entity);
		cities = await CitiesService.ParentById(ParentId, 0, PageSize);
		await InvokeAsync(StateHasChanged);


	}

}
