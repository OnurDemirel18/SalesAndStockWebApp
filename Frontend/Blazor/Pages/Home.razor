@page "/"
@using Business.Interfaces
@using Entities.Entities
@inject ICategoryService CategoryService


<HeaderTemplate>
    <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle" Text="Add New Category" Click="@InsertRow" Disabled="@(editMode == DataGridEditMode.Single && categoriesToInsert.Count() > 0)" />
</HeaderTemplate>
<Columns>
    <RadzenDataGridColumn Property="CategoryID" Title="Category ID" Width="120px" Frozen="true" />

    <RadzenDataGridColumn Property="Employee.LastName" Title="Employee" Width="220px">
        <Template Context="Category">
            <RadzenImage Path="@Category.Employee?.Photo" Style="width: 32px; height: 32px;" class="rz-bCategory-radius-4 rz-me-2" AlternateText="@(Category.Employee?.FirstName + " " + Category.Employee?.LastName)" />
            @Category.Employee?.FirstName @Category.Employee?.LastName
        </Template>
        <EditTemplate Context="Category">
            <RadzenDropDown @bind-Value="Category.EmployeeID" Data="@employees" ValueProperty="EmployeeID" Style="width:100%; display: block;"
            InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Select employee" }})">
                <Template>
                    <RadzenImage Path="@context.Photo" Style="width: 20px; height: 20px;" class="rz-bCategory-radius-4 rz-me-2" />
                    @context.FirstName @context.LastName
                </Template>
            </RadzenDropDown>
        </EditTemplate>
    </RadzenDataGridColumn>
    <RadzenDataGridColumn Property="@nameof(Category.CategoryDate)" Title="Category Date" Width="200px">
        <Template Context="Category">
            @String.Format("{0:d}", Category.CategoryDate)
        </Template>
        <EditTemplate Context="Category">
            <RadzenDatePicker @bind-Value="Category.CategoryDate" Style="width:100%" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Select Category date" }})" />
        </EditTemplate>
    </RadzenDataGridColumn>
    <RadzenDataGridColumn Property="@nameof(Category.Freight)" Title="Freight">
        <Template Context="Category">
            @String.Format(new System.Globalization.CultureInfo("en-US"), "{0:C}", Category.Freight)
        </Template>
        <EditTemplate Context="Category">
            <RadzenNumeric @bind-Value="Category.Freight" Style="width:100%" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Select freight" }})" />
        </EditTemplate>
    </RadzenDataGridColumn>
    <RadzenDataGridColumn Property="@nameof(Category.ShipName)" Title="Ship Name">
        <EditTemplate Context="Category">
            <RadzenTextBox @bind-Value="Category.ShipName" Style="width:200px; display: block" Name="ShipName" aria-label="Enter ship name" />
            <RadzenRequiredValidator Text="ShipName is required" Component="ShipName" Popup="true" />
        </EditTemplate>
    </RadzenDataGridColumn>
    <RadzenDataGridColumn Property="@nameof(Category.ShipCountry)" Title="ShipCountry">
        <EditTemplate Context="Category">
            <RadzenTextBox @bind-Value="Category.ShipCountry" Style="width:200px; display: block" Name="ShipCountry" aria-label="Enter ship country" />
            <RadzenRequiredValidator Text="ShipCountry is required" Component="ShipCountry" Popup="true" />
        </EditTemplate>
    </RadzenDataGridColumn>
    <RadzenDataGridColumn Property="@nameof(Category.ShipCity)" Title="ShipCity">
        <EditTemplate Context="Category">
            <RadzenTextBox @bind-Value="Category.ShipCity" Style="width:200px; display: block" Name="ShipCity" aria-label="Enter ship city" />
            <RadzenRequiredValidator Text="ShipCity is required" Component="ShipCity" Popup="true" />
        </EditTemplate>
    </RadzenDataGridColumn>
    <RadzenDataGridColumn Context="Category" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Frozen="true" FrozenPosition="FrozenColumnPosition.Right">
        <Template Context="Category">
            <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(Category))" @onclick:stopPropagation="true">
            </RadzenButton>
            <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@(args => DeleteRow(Category))" @onclick:stopPropagation="true">
            </RadzenButton>
        </Template>
        <EditTemplate Context="Category">
            <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveRow(Category))" aria-label="Save">
            </RadzenButton>
            <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@((args) => CancelEdit(Category))" aria-label="Cancel">
            </RadzenButton>
            <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@(args => DeleteRow(Category))" aria-label="Delete">
            </RadzenButton>
        </EditTemplate>
    </RadzenDataGridColumn>
</Columns>
</RadzenDataGrid>

@code {
    RadzenDataGrid<Category> categoriesGrid;
    IList<Category> categories;

    DataGridEditMode editMode = DataGridEditMode.Single;

    List<Category> categoriesToInsert = new List<Category>();
    List<Category> categoriesToUpdate = new List<Category>();

    void Reset()
    {
        categoriesToInsert.Clear();
        categoriesToUpdate.Clear();
    }

    void Reset(Category Category)
    {
        categoriesToInsert.Remove(Category);
        categoriesToUpdate.Remove(Category);
    }

    protected override async Task OnInitializedAsync()
    {
    
        categories = await CategoryService.GetAll();
    }

    async Task EditRow(Category Category)
    {
        if (!categoriesGrid.IsValid) return;

        if (editMode == DataGridEditMode.Single)
        {
            Reset();
        }

        categoriesToUpdate.Add(Category);
        await categoriesGrid.EditRow(Category);
    }

    void OnUpdateRow(Category Category)
    {
        
    }

    async Task SaveRow(Category Category)
    {
        await categoriesGrid.UpdateRow(Category);
    }

    void CancelEdit(Category Category)
    {
        Reset(Category);

        categoriesGrid.CancelEditRow(Category);

        
        
    }

    async Task DeleteRow(Category Category)
    {
        
    }

    async Task InsertRow()
    {
        if (!categoriesGrid.IsValid) return;

        if (editMode == DataGridEditMode.Single)
        {
            Reset();
        }

        var CategoryToInsert = new Category();
        
        await categoriesGrid.InsertRow(CategoryToInsert);
    }

    void OnCreateRow(Category Category)
    {
        
    }
}
