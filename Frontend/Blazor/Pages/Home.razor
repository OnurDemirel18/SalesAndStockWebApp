@page "/home"
@using Business.Interfaces
@using Entities.Entities
@inject ICategoryService CategoryService
<RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle" Text="Add New Category" Click="@InsertRow" Disabled="@(editMode == DataGridEditMode.Single && categoriesToInsert.Count() > 0)" />


    <RadzenProgressBar ProgressBarStyle="ProgressBarStyle.Light" ShowValue="false" />



    <RadzenDataGrid @ref="categoriesGrid" AllowAlternatingRows="false" AllowFiltering="true" AllowPaging="true" PageSize="5" AllowSorting="true" EditMode="@editMode"
                    Data="@categories" TItem="Category" RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow" Sort="@Reset" Page="@Reset" Filter="@Reset" ColumnWidth="200px">
        <HeaderTemplate>
            <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle" Text="Add New Category" Click="@InsertRow" Disabled="@(editMode == DataGridEditMode.Single && categoriesToInsert.Count() > 0)" />
        </HeaderTemplate>
        <Columns>
            <RadzenDataGridColumn Property="CategoryID" Title="Category ID" Width="120px" Frozen="true" />


            <RadzenDataGridColumn Property="@nameof(Category.Name)" Title="ShipCity">
                <EditTemplate Context="Category">
                    <RadzenTextBox @bind-Value="Category.Name" Style="width:200px; display: block" Name="Name" aria-label="Enter ship city" />
                    <RadzenRequiredValidator Text="Category Name Is Required" Component="Name" Popup="true" />
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Context="Category" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Frozen="true" FrozenPosition="FrozenColumnPosition.Right">
                <Template Context="Category">
                    <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(Category))" @onclick:stopPropagation="true">
                    </RadzenButton>
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@(args => DeleteRow(Category))" @onclick:stopPropagation="true">
                    </RadzenButton>
                </Template>
                <EditTemplate Context="Category">
                    <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveRow(Category))" aria-label="Save">
                    </RadzenButton>
                    <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@((args) => CancelEdit(Category))" aria-label="Cancel">
                    </RadzenButton>
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@(args => DeleteRow(Category))" aria-label="Delete">
                    </RadzenButton>
                </EditTemplate>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>





@code {
    RadzenDataGrid<Category>? categoriesGrid;
    IEnumerable<Category>? categories;


    DataGridEditMode editMode = DataGridEditMode.Single;

    List<Category> categoriesToInsert = new List<Category>();
    List<Category> categoriesToUpdate = new List<Category>();

    void Reset()
    {
        categoriesToInsert.Clear();
        categoriesToUpdate.Clear();
    }

    void Reset(Category Category)
    {
        categoriesToInsert.Remove(Category);
        categoriesToUpdate.Remove(Category);
    }

    protected override async Task OnInitializedAsync()
    {
        categories = await CategoryService.GetAll();
    }

    async Task EditRow(Category Category)
    {
        if (!categoriesGrid.IsValid) return;

        if (editMode == DataGridEditMode.Single)
        {
            Reset();
        }

        categoriesToUpdate.Add(Category);
        await categoriesGrid.EditRow(Category);
    }

    void OnUpdateRow(Category Category)
    {

    }

    async Task SaveRow(Category Category)
    {
        await categoriesGrid.UpdateRow(Category);
    }

    void CancelEdit(Category Category)
    {
        categoriesGrid.CancelEditRow(Category);
    }

    async Task DeleteRow(Category Category)
    {

    }

    async Task InsertRow()
    {


        var Category = new Category();
        categoriesToInsert.Add(Category);
        await categoriesGrid.InsertRow(Category);
    }

    async void OnCreateRow(Category entity)
    {
        var add = await CategoryService.Add(entity);
        categories = await CategoryService.GetAll();
    }
}